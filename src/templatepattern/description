Template pattern encapsulates pieces of algorithms so that subclasses can hook themselves right into computation anytime
they want.

It defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Subclasses can redefine certain
steps of the algorithm without changing algorithm structure.

We create a template for an algorithm, i.e a set of steps.One or more of these steps is defined to be abstract
and implemented by subclass. This ensures that algorithm stays unchanged, while subclass provide some implementation.

A hook is method declared in the abstract class, but only given empty/default implementation. This gives subclasses
the ability to "hook into" algorithms at various points, if they wish; a subclass is also free to ignore a hook.

Use ABSTRACT method when your subclass must provide an implementation of a method or step in algorithm. Use hooks when
part of an algorithm is optional.
Hooks gives subclass chance to react to some step in template method that is about to happen or just happened.

Hollywood Principle:
Don't call us. We will call you.

It prevents dependency rot. It happens when we have high level component depending on low level component depending on
high level component depending on sideways component determine and so on. When rot sets in system design is bad.

With hollywood principle we allow low level components to hook onto the system but high-level components determine when
they are needed and how.


The Dependency Inversion Principle teaches us to avoid the use of concrete classes and instead work as much as possible
with abstractions. The Hollywood Principle is a technique for building frameworks or components so that lower-level
components can be hooked into the computation, but without creating dependencies between the lower-level components
and the higher-level layers. So, they both have the goal of decoupling, but the Dependency Inversion Principle makes a
much stronger and general statement about how to avoid dependencies in design.

The Hollywood Principle gives us a technique for creating designs that allow low-level
structures to inter-operate while preventing other classes from becoming too dependent on them.

Arrays.sort is an example of template pattern, though its a static method and no subclassing is done.